import numpy as np

import poly_fitting


def test_fit_poly():
    x = np.array(
        [
            0.1377927,
            3.18282121,
            3.94871818,
            0.21755552,
            2.83184582,
            5.25984922,
            1.54905588,
            1.28398704,
            3.74585624,
            2.63571538,
            5.42734153,
            5.5301249,
            0.84069897,
            4.64928294,
            4.85561834,
        ]
    )
    y = np.array(
        [
            0.19470327,
            0.07359496,
            -0.5820897,
            0.22862199,
            0.26879298,
            -0.90162581,
            0.87317454,
            0.89257967,
            -0.47023807,
            0.57128352,
            -0.9386577,
            -0.64580977,
            0.73815349,
            -1.02463808,
            -0.87399658,
        ]
    )

    W = poly_fitting.fit_poly(x, y, 3)
    target = np.array([[-0.08964077, 1.6546026, -0.76734292, 0.08054144]])
    assert np.max(np.abs(W - target)) < 1e-4

    W = poly_fitting.fit_poly(x, y, 5)
    target = np.array([[0.05245757, 0.93515607, -0.05160028, -0.17991612, 0.03895283, -0.00200736]])
    assert np.max(np.abs(W - target)) < 1e-4


def test_poly():
    x = np.array(
        [
            5.44123783,
            0.70779104,
            2.26488351,
            5.09092996,
            2.65344047,
            1.11096457,
            3.78192394,
            4.7827656,
            5.69469193,
            1.93241639,
            4.47924495,
            1.32904201,
            1.96124702,
            3.73773815,
            4.86686254,
        ]
    )

    W = np.array([[-0.49064684, 2.24876821, -0.98827926, 0.10364597]])
    target = np.array(
        np.array(
            [
                -0.81734376,
                0.64266559,
                0.7371539,
                -0.98060226,
                0.45443702,
                0.92999822,
                -0.51479747,
                -1.00266187,
                -0.59308916,
                0.91236356,
                -0.93168113,
                0.99572569,
                0.90023351,
                -0.48001501,
                -1.00680827,
            ]
        )
    )
    y = poly_fitting.poly(x, W)
    assert np.max(np.abs(y - target)) < 1e-4

    W = np.array(
        [
            [
                -8.17186293e00,
                3.38468733e01,
                -5.06741943e01,
                3.97023991e01,
                -1.78800366e01,
                4.77595982e00,
                -7.48306411e-01,
                6.36064735e-02,
                -2.26518555e-03,
            ]
        ]
    )
    target = np.array(
        [
            -0.81982884,
            0.74866998,
            0.82714462,
            -0.99554771,
            0.6085989,
            0.8923105,
            -0.54644746,
            -1.01056051,
            -0.56173344,
            0.86310454,
            -0.94429366,
            0.84540374,
            0.86412866,
            -0.50867749,
            -1.01620115,
        ]
    )
    y = poly_fitting.poly(x, W)
    assert np.max(np.abs(y - target)) < 1e-4


def test_mse_poly():
    x = np.array(
        [
            6.16064329,
            3.2552061,
            2.03385056,
            4.99551614,
            5.30981947,
            1.91732393,
            5.4212663,
            6.04051106,
            5.7842464,
            0.63584688,
            2.93676169,
            4.57334735,
            1.31680844,
            5.10532143,
            6.03536477,
        ]
    )
    y = np.array(
        [
            -0.09549347,
            0.06507871,
            0.8829749,
            -1.07034546,
            -0.84969727,
            0.94412178,
            -0.62025838,
            -0.05889668,
            -0.52770285,
            0.40337707,
            0.22557007,
            -1.12680628,
            1.07127133,
            -0.91808987,
            -0.07212472,
        ]
    )

    W = np.array([[0.0376539, 0.76123999, 0.25481408, -0.33637375, 0.07039374, -0.00419169]])
    target = 0.010232666137252305
    mse = poly_fitting.mse_poly(x, y, W)
    assert ((mse - target) ** 2) < 1e-4

    W = np.array(
        [
            [
                -1.11677360e00,
                1.26444746e01,
                -4.08671231e01,
                6.88376527e01,
                -6.61923177e01,
                3.90664243e01,
                -1.46520766e01,
                3.49536281e00,
                -5.12385788e-01,
                4.19911708e-02,
                -1.47031706e-03,
            ]
        ]
    )
    target = 10.127925633650154
    mse = poly_fitting.mse_poly(x, y, W)
    assert ((mse - target) ** 2) < 1e-4


def test_ridge_fit_poly():
    x = np.array(
        [
            0.97979506,
            5.16416351,
            1.98674194,
            6.09261727,
            0.03439108,
            5.03558881,
            2.64555768,
            3.23996878,
            2.40172317,
            4.36415694,
            4.3372846,
            1.32138691,
            0.8314573,
            5.44518683,
            0.71934886,
        ]
    )
    y = np.array(
        [
            1.00648233,
            -0.88302325,
            0.98724393,
            -0.13357347,
            -0.01338053,
            -0.90958631,
            0.42022606,
            -0.15369557,
            0.5871545,
            -0.808337,
            -1.07670964,
            1.02988653,
            0.72597847,
            -1.01115495,
            0.73044141,
        ]
    )
    k = 3
    lamb = 0.1

    target = np.array([[0.03617548, 1.57560011, -0.76768321, 0.08239452]])
    output = poly_fitting.ridge_fit_poly(x_train=x, y_train=y, k=k, lamb=lamb)
    assert (np.max(np.abs(target - output))) < 1e-6


def test_perform_cv():
    x = np.array(
        [
            2.10440002,
            6.27682366,
            2.25247212,
            0.37991638,
            4.10771361,
            5.61249705,
            2.19598422,
            2.75318597,
            4.13390109,
            4.7471436,
            4.2115332,
            2.48888977,
            2.53762697,
            4.32005136,
            2.37425901,
        ]
    )
    y = np.array(
        [
            0.75402805,
            0.0267855,
            0.79573682,
            0.33973729,
            -0.79424256,
            -0.55980208,
            0.88203352,
            0.43723684,
            -0.70578681,
            -0.8574338,
            -0.87851318,
            0.5905476,
            0.68014176,
            -1.00464002,
            0.70858535,
        ]
    )
    k = 8
    lamb = 0.1
    folds = 3

    target = 0.1172921665191103
    output = poly_fitting.perform_cv(x=x, y=y, k=k, lamb=lamb, folds=folds)
    assert ((target - output) ** 2) < 1e-8


if __name__ == "__main__":
    test_fit_poly()
    test_poly()
    test_mse_poly()
    test_ridge_fit_poly()
    test_perform_cv()
